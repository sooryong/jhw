"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBalance = void 0;
const https_1 = require("firebase-functions/v2/https");
const solapi_1 = require("solapi");
const params_1 = require("firebase-functions/params");
// Secrets Ï†ïÏùò
const solapiApiKey = (0, params_1.defineSecret)('SOLAPI_API_KEY');
const solapiApiSecret = (0, params_1.defineSecret)('SOLAPI_API_SECRET');
// Ïã§Ï†ú CoolSMS ÏûîÏï° Ï°∞Ìöå Ìï®Ïàò - ÏµúÏã† SolapiSDK ÏÇ¨Ïö©
const getRealSolapiBalance = async (apiKey, apiSecret) => {
    console.log('üîë Using CoolSMS API credentials from secrets...');
    console.log('üìã API Key length:', apiKey ? apiKey.length : 0);
    console.log('üìã API Secret length:', apiSecret ? apiSecret.length : 0);
    if (!apiKey || !apiSecret) {
        throw new Error('CoolSMS API credentials not configured');
    }
    try {
        console.log('üöÄ Using SolapiSDK v5.5.2 for balance check...');
        const messageService = new solapi_1.SolapiMessageService(apiKey, apiSecret);
        // ÏµúÏã† SDK Î∞©Ïãù: getBalance() Î©îÏÑúÎìú ÏÇ¨Ïö©
        const response = await messageService.getBalance();
        console.log('‚úÖ SolapiSDK v5.5.2 balance response:', JSON.stringify(response, null, 2));
        return response;
    }
    catch (error) {
        console.error('‚ùå SolapiSDK error:', error);
        throw error;
    }
};
// Î∞±ÏóÖÏö© ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ìï®Ïàò - Enhanced for development
const getDummyBalance = () => {
    console.log('‚ö†Ô∏è Using fallback dummy balance data for development/testing');
    return {
        point: 2500,
        cash: 7500,
        note: 'This is dummy data - CoolSMS API not accessible'
    };
};
exports.getBalance = (0, https_1.onCall)({
    secrets: [solapiApiKey, solapiApiSecret],
    region: 'asia-northeast3',
    memory: '256MiB',
    timeoutSeconds: 30,
    maxInstances: 5
}, async () => {
    try {
        console.log('üîç Balance check started - SOLAPI SDK');
        let balanceData;
        let isRealData = false;
        try {
            console.log('üåê Attempting to fetch real SOLAPI balance...');
            // SecretsÏóêÏÑú API ÌÇ§ Í∞ÄÏ†∏Ïò§Í∏∞
            const apiKey = solapiApiKey.value();
            const apiSecret = solapiApiSecret.value();
            balanceData = await getRealSolapiBalance(apiKey, apiSecret);
            isRealData = true;
            console.log('‚úÖ Real SOLAPI balance retrieved successfully:', JSON.stringify(balanceData, null, 2));
        }
        catch (error) {
            console.warn('‚ö†Ô∏è Failed to fetch real balance, using fallback dummy data:', error);
            console.warn('Error details:', error instanceof Error ? error.message : 'Unknown error');
            balanceData = getDummyBalance();
            isRealData = false;
        }
        // Enhanced response with metadata
        return {
            success: true,
            balance: balanceData,
            timestamp: new Date().toISOString(),
            source: isRealData ? 'solapi_api' : 'fallback_dummy',
            version: 'v2_solapi_sendone'
        };
    }
    catch (error) {
        console.error('‚ùå Balance check failed:', error);
        throw new https_1.HttpsError('internal', `Balance check failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
});
//# sourceMappingURL=getBalance.js.map